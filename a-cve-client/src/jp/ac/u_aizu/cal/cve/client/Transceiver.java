package jp.ac.u_aizu.cal.cve.client;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import cve.CVEClient;
import cve.CVEClientIF;

/**
 * A simple console based client that can subscribe to cve channel and send
 * values specified by the user.
 *
 * <pre>
 * Usage: &lt;hostname&gt; &lt;port&gt;
 *
 * <pre>
 * @author Rasika Ranaweera
 *
 */
public class Transceiver implements CVEClientIF {
    
    /***
     * List of commands supported by this client
     */
    public static final String CMD_EXIT = "exit";
    public static final String CMD_HELP = "help";
    public static final String CMD_RANDOM = "rand";
    public static final String CMD_AUTO = "auto";
    public static final String CMD_STOP_AUTO = "s";
    public static final String CMD_RECONNECT = "recon";
    public static final String CMD_X = "x=";
    public static final String CMD_Y = "y=";
    public static final String CMD_Z = "z=";
    public static final String CMD_LOCATION = "l=";
    public static final String CMD_ORIENTATION = "o=";
    public static final String CMD_POSITION = "p=";
    /**
     * Duration between events in Auto mode (in milliseconds)
     */
    public static final int DEFAULT_DURATION_BETWEEN_EVENTS_MS = 500;
    
    /**
     *
     * @param args
     *            CVE server host name, channel
     */
    public static void main(String[] args) {
        if (args.length == 2) {
            final String hostName = args[0];
            final String channel = args[1];
            try {
                new Transceiver(hostName, channel).process();
            } catch (Exception e) {
                System.err.println(e.getMessage());
            }
        } else {
            System.err.println("Usage: <hostname> <channel>");
        }
    }
    
    /**
     * Initialize the Transceiver, also try to connect to cve server.
     *
     * @param hostName
     *            Host name/ or IP where the cve server is running
     * @param channel
     *            Channel which this client subscribes to
     */
    public Transceiver(String hostName, String channel) {
        this.hostName = hostName;
        this.channel = channel;
        connect();
    }
    
    /**
     * Reads the console and process user commands
     *
     * @throws IOException
     */
    public void process() throws IOException {
        System.out.println("******************************************************************************");
        System.out.println("Sender is waiting...");
        showHelp();
        String line = "";
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        // loop until stop is requested
        while (!line.equals(CMD_EXIT)) {
            try {
                line = reader.readLine();
                resolveCommand(line);
            } catch (Exception exception) {
                System.err.println(exception.getMessage());
            }
        }
    }
    
    /**
     * Connect to cve server if both host name and channel are not null.
     *
     * @param hostName
     *            Host name/ or IP where the cve server is running
     * @param channel
     *            Channel which this client subscribes to
     */
    private void connect() {
        if (null != hostName && null != channel) {
            System.out.println("Connecting to : " + hostName + " via channel : " + channel);
            cveClient = new CVEClient(hostName, this, channel);
        }
    }
    
    /**
     * Resolves user commands and act accordingly.
     *
     * @param command
     *            A command supported by this client
     */
    private void resolveCommand(String command) {
        if (null != command) {
            if (command.startsWith(CMD_HELP)) {
                showHelp();
            } else if (command.startsWith(CMD_X)) {
                sendX(command);
            } else if (command.startsWith(CMD_Y)) {
                sendY(command);
            } else if (command.startsWith(CMD_Z)) {
                sendZ(command);
            } else if (command.startsWith(CMD_LOCATION)) {
                sendLocation(command);
            } else if (command.startsWith(CMD_ORIENTATION)) {
                sendOrientation(command);
            } else if (command.startsWith(CMD_RANDOM)) {
                sendRandomPosition();
            } else if (command.startsWith(CMD_AUTO)) {
                startAuto(command);
            } else if (command.startsWith(CMD_STOP_AUTO)) {
                stopAuto(command);
            } else if (command.startsWith(CMD_RECONNECT)) {
                connect();
            }
        }
    }
    
    /**
     * Shows list of commands supported by this client
     */
    public void showHelp() {
        System.out.println("******************************************************************************");
        System.out.println(CMD_HELP + "\tShow Commands");
        System.out.println(CMD_X + "\t\tSend X (E.g.: x=12.332)");
        System.out.println(CMD_Y + "\t\tSend Y (E.g.: y=8.94)");
        System.out.println(CMD_Z + "\t\tSend Z (E.g.: z=5.67)");
        System.out.println(CMD_LOCATION + "\t\tSend Location (E.g.: l=11.23,12.33,32.09)");
        System.out.println(CMD_ORIENTATION + "\t\tSend Orientation (E.g.: o=11.23,12.33,32.09)");
        System.out.println(CMD_POSITION + "\t\tSend Position (E.g.: p=11.23,12.33,32.09,11.23,12.33,32.09)");
        System.out.println(CMD_RANDOM + "\tSend a Random Position (E.g.: p=11.23,12.33,32.09,11.23,12.33,32.09)");
        System.out.println(CMD_AUTO + "\tSend Random Positions");
        System.out.println(CMD_STOP_AUTO + "\t\tStop Sending Random Positions");
        System.out.println(CMD_RECONNECT + "\tReconnect to CVE Server");
        System.out.println(CMD_EXIT + "\tExit");
        System.out.println("******************************************************************************");
    }
    
    private void sendX(String command) {
        float x = Float.parseFloat(command.replace(CMD_X, ""));
        sendLocation(x, 0.0F, 0.0F);
    }
    
    private void sendY(String command) {
        float y = Float.parseFloat(command.replace(CMD_Y, ""));
        sendLocation(0.0F, y, 0.0F);
    }
    
    private void sendZ(String command) {
        float z = Float.parseFloat(command.replace(CMD_Z, ""));
        sendLocation(0.0F, 0.0F, z);
    }
    
    private void sendLocation(String command) {
        String locationString = command.replace(CMD_LOCATION, "");
        String[] locationParams = locationString.split(",");
        sendLocation(Float.parseFloat(locationParams[0]), Float.parseFloat(locationParams[1]), Float.parseFloat(locationParams[2]));
    }
    
    private void sendOrientation(String command) {
        String orientationString = command.replace(CMD_ORIENTATION, "");
        String[] orientationParams = orientationString.split(",");
        sendOrientation(Float.parseFloat(orientationParams[0]), Float.parseFloat(orientationParams[1]), Float.parseFloat(orientationParams[2]));
    }
    
    /**
     * Sends x, y, z location coordinates to the cve server
     *
     * @param x
     *            X or sway
     * @param y
     *            Y or heave
     * @param z
     *            X or surge
     */
    private void sendLocation(float x, float y, float z) {
        System.out.println("Location: x: " + x + ", y: " + y + ", z: " + z);
        if (null != cveClient && cveClient.isConnected()) {
            cveClient.setLocation(x, y, z);
        }
    }
    
    /**
     * Sends roll, pitch, yaw orientation coordinates to the cve server
     *
     */
    private void sendOrientation(float roll, float pitch, float yaw) {
        System.out.println("Orientation: roll: " + roll + ", pitch: " + pitch + ", yaw: " + yaw);
        if (null != cveClient && cveClient.isConnected()) {
            cveClient.setOrientation(roll, pitch, yaw);
        }
    }
    
    /**
     * Sends x, y, z location coordinates and roll, pitch, yaw orientation
     * coordinates to the cve server
     */
    private void sendPosition(float x, float y, float z, float roll, float pitch, float yaw) {
        System.out.println("Position [Location: x: " + x + ", y: " + y + ", z: " + z + "], [Orientation: roll: " + roll + ", pitch: " + ", yaw: "
                           + yaw + "]");
        if (null != cveClient && cveClient.isConnected()) {
            cveClient.setPosition(x, y, z, roll, pitch, yaw);
        }
    }
    
    private void sendRandomPosition() {
        sendPosition((float) (Math.random() * 100D), (float) (Math.random() * 100D), (float) (Math.random() * 100D), (float) (Math.random() * 100D),
                     (float) (Math.random() * 100D), (float) (Math.random() * 100D));
    }
    
    private void startAuto(String command) {
        try {
            duration = Integer.parseInt(command.replace(CMD_AUTO, ""));
            if (duration <= 0) {
                duration = DEFAULT_DURATION_BETWEEN_EVENTS_MS;
            }
        } catch (NumberFormatException numberFormatException) {
        }
        stop = false;
        new Thread() {
            @Override
            public void run() {
                while (!stop) {
                    sendRandomPosition();
                    try {
                        Thread.sleep(duration);
                    } catch (InterruptedException e) {
                    }
                }
            }
        }.start();
    }
    
    private void stopAuto(String command) {
        if (command.equalsIgnoreCase(CMD_STOP_AUTO)) {
            stop = true;
        }
    }
    
    /**
     * Receiver methods: receive events when different clients update the
     * subscribed channel.
     */
    @Override
    public void getExtraParam(String param, float value) {
        System.out.println("Parameter: " + param + ", Value: " + value);
    }
    
    @Override
    public void getLocation(float x, float y, float z) {
        System.out.println("Location: x: " + x + ", y: " + y + ", z: " + z);
    }
    
    @Override
    public void getOrientation(float roll, float pitch, float yaw) {
        System.out.println("Orientation: roll: " + roll + ", pitch: " + pitch + ", yaw: " + yaw);
    }
    
    @Override
    public void getPosition(float x, float y, float z, float roll, float pitch, float yaw) {
        System.out.println("Position [Location: x: " + x + ", y: " + y + ", z: " + z + "], [Orientation: roll: " + roll + ", pitch: " + ", yaw: "
                           + yaw + "]");
    }
    
    private CVEClient cveClient = null;
    private String hostName, channel;
    private boolean stop = false;
    int duration = DEFAULT_DURATION_BETWEEN_EVENTS_MS;
}
