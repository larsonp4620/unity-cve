package unity_cve_bridge;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;

import cve.CVEClient;
import cve.CVEClientIF;
import com.google.flatbuffers.*;
import unity_cve_fbuffer_classes.*;

public class Bridge_Controller {
	String CVEServerHostName = ""; // args
	String unityClientHostName = "";
	final int numberOfChannels = 7;
	final String channelPrefix = "CH"; // args
	private Bridge_CVE_Component[] bridgeCVEComponent;
	private Bridge_Unity_Server unityServerThread;
	private String[] channelArray;

	public static void main(String[] args) {
		if (args.length < 2) {
			
			System.out.println("Please provide a CVE server IP and a unity IP");
			return;
		}
		
		new Bridge_Controller(args[0],args[1]);

	}

	private Bridge_Controller(String CVEHostName, String unityHostName) {
		this.bridgeCVEComponent = new Bridge_CVE_Component[this.numberOfChannels];
		this.channelArray = new  String[this.numberOfChannels];
		
		for(int i = 0; i < this.numberOfChannels; i++){
			this.channelArray[i] = this.channelPrefix + Integer.toString(i);
		}
		
		try {
			this.unityServerThread = new Bridge_Unity_Server(unityClientHostName, this);
			for(int i = 0; i < this.numberOfChannels; i++){
				this.bridgeCVEComponent[i] = new Bridge_CVE_Component(this.CVEServerHostName, this.channelArray[i], this);
			}

		} catch (Exception e) {
			System.err.println(e.getMessage());
			System.err.println("Error Starting");
		}
		

	}
	
	private Bridge_CVE_Component getCVEComponent(String channel) {
		int channelNumber = Integer.parseInt(channel.substring(this.channelPrefix.length()));
		if(channelNumber >= 0 && channelNumber < this.numberOfChannels){
			return this.bridgeCVEComponent[channelNumber];
		}
		return null;
	}

	public void handleCVELocation(float x, float y, float z, String channel) {
		this.unityServerThread.sendFBufferLocation(x, y, z, channel);

	}

	public void handleCVEPosition(float x, float y, float z, float roll, float pitch, float yaw, String channel) {
		this.unityServerThread.sendFBufferPosition(x, y, z, roll, pitch, yaw, channel);

	}

	public void handleCVEOrientation(float roll, float pitch, float yaw, String channel) {
		this.unityServerThread.sendFBufferOrientation(roll, pitch, yaw, channel);
	}

	public void handleCVEExtraParam(String name, float value, String channel) {
		this.unityServerThread.sendFBufferExtraParam(name, value, channel);
	}

	public void handleUnityLocation(float x, float y, float z, String channel) {
		Bridge_CVE_Component component = this.getCVEComponent(channel);
		if(component != null)
			component.cveClient.setLocation(x, y, z);
		else
			System.out.println("Message recieved on unwatched channel. Channel: "+channel);
	}

	public void handleUnityPosition(float x, float y, float z, float roll, float pitch, float yaw, String channel) {
		Bridge_CVE_Component component = this.getCVEComponent(channel);
		if(component != null)
			component.cveClient.setPosition(x, y, z, roll, pitch, yaw);
		else
			System.out.println("Message recieved on unwatched channel. Channel: "+channel);
	}

	public void handleUnityOrientation(float roll, float pitch, float yaw, String channel) {
		Bridge_CVE_Component component = this.getCVEComponent(channel);
		if(component != null)
			component.cveClient.setOrientation(roll, pitch, yaw);
		else
			System.out.println("Message recieved on unwatched channel. Channel: "+channel);
	}

	public void handleUnityExtraParam(String name, float value, String channel) {
		Bridge_CVE_Component component = this.getCVEComponent(channel);
		if(component != null)
			component.cveClient.setExtraParam(name, value);
		else
			System.out.println("Message recieved on unwatched channel. Channel: "+channel);
	}

}
