package unity_cve_bridge;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;

import cve.CVEClient;
import cve.CVEClientIF;
import com.google.flatbuffers.*;
import unity_cve_fbuffer_classes.*;

/**
 * A udp bridge and cve client that can subscribe to cve channel.
 *
 * Adapted from the work of Rasika Ranaweera
 * 
 * <pre>
 * @author Peter Larson
 *
 */
public class Bridge_CVE_Component implements CVEClientIF {
	
	//If problems occur try switching to private and adding accessor methods to this class. 
    public CVEClient cveClient = null;
    private String hostName, channel;
    private boolean stop = false;
    private Bridge_Controller controller;

    
    /**
     * Initialize the Bridge_CVE_Component, also try to connect to cve server.
     *
     * @param hostName
     *            Host name/ or IP where the cve server is running
     * @param channel
     *            Channel which this client subscribes to
     */
    public Bridge_CVE_Component(String hostName, String channel, Bridge_Controller controller) {
        this.hostName = hostName;
        this.channel = channel;
        this.controller = controller;
        connect();
    }
   
    
    /**
     * Connect to cve server if both host name and channel are not null.
     *
     * @param hostName
     *            Host name/ or IP where the cve server is running
     * @param channel
     *            Channel which this client subscribes to
     */
    private void connect() {
        if (null != hostName && null != channel) {
            System.out.println("Connecting to : " + hostName + " via channel : " + channel);
            this.cveClient = new CVEClient(hostName, this, channel);
        }
    }
    
    

    /**
     * Receiver methods: receive events when different clients update the
     * subscribed channel.
     */
    
    @Override
    public void getExtraParam(String param, float value) {
        System.out.println("Sending parameter: " + param + ", Value: " + value);
        //sendMessage("parameter: " + param + ", Value: " + value);
        this.controller.handleCVEExtraParam(param,value,this.channel);
    }
    
    @Override
    public void getLocation(float x, float y, float z) {
        System.out.println("Sending location: x: " + x + ", y: " + y + ", z: " + z);
        //sendMessage("location: x: " + x + ", y: " + y + ", z: " + z);
        this.controller.handleCVELocation(x,y,z,this.channel);
    }
    
    @Override
    public void getOrientation(float roll, float pitch, float yaw) {
        System.out.println("Sending orientation: roll: " + roll + ", pitch: " + pitch + ", yaw: " + yaw);
        //sendMessage("orientation: roll: " + roll + ", pitch: " + pitch + ", yaw: " + yaw);
        this.controller.handleCVEOrientation(roll,pitch,yaw,this.channel);
    }
    
    @Override
    public void getPosition(float x, float y, float z, float roll, float pitch, float yaw) {
        System.out.println("Sending position [Location: x: " + x + ", y: " + y + ", z: " + z + "], [Orientation: roll: " + roll + ", pitch: " + ", yaw: "
                           + yaw + "]");
        //sendMessage("position [Location: x: " + x + ", y: " + y + ", z: " + z + "], [Orientation: roll: " + roll + ", pitch: " + ", yaw: "                           + yaw + "]");
        this.controller.handleCVEPosition(x,y,z,roll,pitch,yaw,this.channel);
    }
    
    //int duration = DEFAULT_DURATION_BETWEEN_EVENTS_MS;
}
