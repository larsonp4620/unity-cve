package unity_cve_bridge;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;

import cve.CVEClient;
import cve.CVEClientIF;
import com.google.flatbuffers.*;
import unity_cve_fbuffer_classes.*;

public class Bridge_Controller {
	String CVEServerHostName = ""; // argss
	String unityClientHostName = ""; // Argss
	final int numberOfChannels = 7;
	final String channelPrefix = "CH";
	private Bridge_CVE_Component[] bridgeCVEComponent;
	private Bridge_Unity_Server unityServerThread;
	private String[] channelArray;

	/**
	 * Main entry point for the bridge controller. This initializes the CVE and
	 * Unity components of the program.
	 *
	 * @param args
	 *            command line arguments
	 */
	public static void main(String[] args) {
		if (args.length < 2) {
			System.out.println("Please provide a CVE server IP and a unity IP");
			return;
		}
		new Bridge_Controller(args[0], args[1]);
	}

	/**
	 * Class used to instantiate and store the objects used for communication
	 * between Unity and CVE.
	 * 
	 * @param CVEHostName
	 *            host name of the CVE server
	 * @param unityHostName
	 *            host name of the Unity game.
	 */
	private Bridge_Controller(String CVEHostName, String unityHostName) {

		System.out.println(
				"Running Bridge_Controller with CVE server: " + CVEHostName + " and Unity game at: " + unityHostName);

		this.bridgeCVEComponent = new Bridge_CVE_Component[this.numberOfChannels];
		this.channelArray = new String[this.numberOfChannels];

		for (int i = 0; i < this.numberOfChannels; i++) {
			this.channelArray[i] = this.channelPrefix + Integer.toString(i);
		}

		try {
			this.unityServerThread = new Bridge_Unity_Server(unityClientHostName, this);
			for (int i = 0; i < this.numberOfChannels; i++) {
				this.bridgeCVEComponent[i] = new Bridge_CVE_Component(this.CVEServerHostName, this.channelArray[i],
						this);
			}

		} catch (Exception e) {
			System.err.println(e.getMessage());
			System.err.println("Error Starting");
		}

	}

	/**
	 * Method that can be called to resolve a string channel name into the CVE
	 * component used for communication on that channel. This method is called
	 * when the methods to handle messages from Unity are called.
	 * 
	 * @param channel
	 *            string channel name
	 * @return channel object if exists, null otherwise.
	 */
	private Bridge_CVE_Component getCVEComponent(String channel) {
		int channelNumber = Integer.parseInt(channel.substring(this.channelPrefix.length()));
		if (channelNumber >= 0 && channelNumber < this.numberOfChannels) {
			return this.bridgeCVEComponent[channelNumber];
		}
		return null;
	}

	/**
	 * Method called by the CVE component when it receives a location message.
	 * This passes the data to the Unity component to send to Unity.
	 * 
	 * @param x
	 * @param y
	 * @param z
	 * @param channel
	 */
	public void handleCVELocation(float x, float y, float z, String channel) {
		this.unityServerThread.sendFBufferLocation(x, y, z, channel);

	}

	/**
	 * Method called by the CVE component when it receives a position message.
	 * This passes the data to the Unity component to send to Unity.
	 * 
	 * @param x
	 * @param y
	 * @param z
	 * @param roll
	 * @param pitch
	 * @param yaw
	 * @param channel
	 */
	public void handleCVEPosition(float x, float y, float z, float roll, float pitch, float yaw, String channel) {
		this.unityServerThread.sendFBufferPosition(x, y, z, roll, pitch, yaw, channel);

	}

	/**
	 * Method called by the CVE component when it receives a Orientation
	 * message. This passes the data to the Unity component to send to Unity.
	 * 
	 * 
	 * @param roll
	 * @param pitch
	 * @param yaw
	 * @param channel
	 */
	public void handleCVEOrientation(float roll, float pitch, float yaw, String channel) {
		this.unityServerThread.sendFBufferOrientation(roll, pitch, yaw, channel);
	}

	/**
	 * Method called by the CVE component when it receives a Extra Parameter
	 * message. This passes the data to the Unity component to send to Unity.
	 * 
	 * @param name
	 * @param value
	 * @param channel
	 */
	public void handleCVEExtraParam(String name, float value, String channel) {
		this.unityServerThread.sendFBufferExtraParam(name, value, channel);
	}

	/**
	 * Method called by the Unity component when it receives a Location message.
	 * This passes the data to the CVE component to send to the CVE server.
	 * 
	 * @param x
	 * @param y
	 * @param z
	 * @param channel
	 */
	public void handleUnityLocation(float x, float y, float z, String channel) {
		Bridge_CVE_Component component = this.getCVEComponent(channel);
		if (component != null)
			component.cveClient.setLocation(x, y, z);
		else
			System.out.println("Message recieved on unwatched channel. Channel: " + channel);
	}

	/**
	 * Method called by the Unity component when it receives a Position message.
	 * This passes the data to the CVE component to send to the CVE server.
	 * 
	 * @param x
	 * @param y
	 * @param z
	 * @param roll
	 * @param pitch
	 * @param yaw
	 * @param channel
	 */
	public void handleUnityPosition(float x, float y, float z, float roll, float pitch, float yaw, String channel) {
		Bridge_CVE_Component component = this.getCVEComponent(channel);
		if (component != null)
			component.cveClient.setPosition(x, y, z, roll, pitch, yaw);
		else
			System.out.println("Message recieved on unwatched channel. Channel: " + channel);
	}

	/**
	 * Method called by the Unity component when it receives a Orientation
	 * message. This passes the data to the CVE component to send to the CVE
	 * server.
	 * 
	 * @param roll
	 * @param pitch
	 * @param yaw
	 * @param channel
	 */
	public void handleUnityOrientation(float roll, float pitch, float yaw, String channel) {
		Bridge_CVE_Component component = this.getCVEComponent(channel);
		if (component != null)
			component.cveClient.setOrientation(roll, pitch, yaw);
		else
			System.out.println("Message recieved on unwatched channel. Channel: " + channel);
	}

	/**
	 * Method called by the Unity component when it receives a Extra Parameter
	 * message. This passes the data to the CVE component to send to the CVE
	 * server.
	 * 
	 * @param name
	 * @param value
	 * @param channel
	 */
	public void handleUnityExtraParam(String name, float value, String channel) {
		Bridge_CVE_Component component = this.getCVEComponent(channel);
		if (component != null)
			component.cveClient.setExtraParam(name, value);
		else
			System.out.println("Message recieved on unwatched channel. Channel: " + channel);
	}

}
