package cve.server;

import java.io.*;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.*;
import cve.*;
import cve.server.util.CVELogger;

public class CVEServerThread implements Runnable {
	private static final Logger logger = Logger.getLogger(CVEServerThread.class.getPackage().getName());

	public int X, Y, Z;
	public int Roll, Pitch, Yaw;

	public static int numThread = 0;
	public static Vector Threads;

	public static ListIterator iter;

	private Socket cSocket;
	private BufferedWriter writer;
	private BufferedReader reader;
	private ObjectInputStream objreader;
	private Thread runner;
	private CVEClientID clientID;
	private String channel;
	private SimpleDateFormat timestampFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");

	public CVEServerThread(Socket client) {
		cSocket = client;
		clientID = new CVEClientID();
		if (CVEServerThread.numThread == 0) {
			CVEServerThread.Threads = new Vector();
		}

		// iter = Threads.listIterator(Threads.size());
		// iter.add(this);
		// CVEServerThread.Threads.addElement(this);
		CVEServerThread.numThread++;

		try {
			writer = new BufferedWriter(new OutputStreamWriter(client.getOutputStream()));
			reader = new BufferedReader(new InputStreamReader(client.getInputStream()));

			// get communication channel
			channel = reader.readLine();
			logger.log(Level.INFO, cSocket.getInetAddress().getHostName() + " " + clientID + " connected to " + channel);
		} catch (Exception e) {
			logger.log(Level.SEVERE, e.getMessage());
		}
	}

	public static void removeMe(CVEServerThread disconnected) {
		// Threads.remove(Threads.indexOf(disconnected));
		iter = Threads.listIterator(Threads.indexOf(disconnected));
		iter.next();
		iter.remove();
		disconnected = null;
	}

	public void set(int x, int y, int z, int roll, int pitch, int yaw) {
		if (X != x || Y != y || Z != z || Roll != roll || Pitch != pitch || Yaw != yaw) {
			X = x;
			Y = y;
			Z = z;
			Roll = roll;
			Pitch = pitch;
			Yaw = yaw;
		}
	}

	public static synchronized void SendPositionToAll(CVEServerThread sender, PositionParameter position) {
		for (Enumeration e = Threads.elements(); e.hasMoreElements();) {
			CVEServerThread t = (CVEServerThread) e.nextElement();
			if (t != sender && t.channel.equals(sender.channel)) {
				// send
				try {
					ObjectOutputStream objwriter = new ObjectOutputStream(t.cSocket.getOutputStream());
					objwriter.writeObject(position);
					objwriter.flush();
				} catch (Exception ex) {
					logger.log(Level.SEVERE, ex.getMessage());
				}
			}
		}
	}

	public synchronized void SendLocationToAll(CVEServerThread sender, LocationParameter location) {
		for (Enumeration e = Threads.elements(); e.hasMoreElements();) {
			CVEServerThread t = (CVEServerThread) e.nextElement();
			if (t != sender && t.channel.equals(sender.channel)) {
				// send
				try {
					ObjectOutputStream objwriter = new ObjectOutputStream(t.cSocket.getOutputStream());
					objwriter.writeObject(location);
					objwriter.flush();
				} catch (Exception ex) {
					logger.log(Level.SEVERE, ex.getMessage());
				}
			}
		}
	}

	public synchronized void SendOrientationToAll(CVEServerThread sender, OrientationParameter orientation) {

		for (iter = Threads.listIterator(); iter.hasNext();) {
			CVEServerThread t = (CVEServerThread) iter.next();
			if (t != sender && t.channel.equals(sender.channel)) {
				try {
					ObjectOutputStream objwriter = new ObjectOutputStream(t.cSocket.getOutputStream());
					objwriter.writeObject(orientation);
					objwriter.flush();
				} catch (Exception e) {
					logger.log(Level.SEVERE, e.getMessage());
				}
			}
		}
	}

	public synchronized void SendExtraParamToAll(CVEServerThread sender, ExtraParameter extra) {
		for (Enumeration e = Threads.elements(); e.hasMoreElements();) {
			CVEServerThread t = (CVEServerThread) e.nextElement();
			if (t != sender && t.channel.equals(sender.channel)) {
				// send
				try {
					ObjectOutputStream objwriter = new ObjectOutputStream(t.cSocket.getOutputStream());
					objwriter.writeObject(extra);
					objwriter.flush();
				} catch (Exception ex) {
					logger.log(Level.SEVERE, ex.getMessage());
				}
			}
		}
	}

	public void sendID() {
		String message = new String("newID " + clientID.getID());
		try {
			this.writer.write(message, 0, message.length());
			this.writer.newLine();
			this.writer.flush();
		} catch (Exception e) {
			logger.log(Level.SEVERE, e.getMessage());
		}
	}

	public boolean isAlive() {
		return true;
	}

	/*
	 * Object received: PositionParameter LocationParameter OrientationParameter
	 * ExtraParameter
	 */

	public void run() {
		try {
			Thread thisThread = Thread.currentThread();
			while (thisThread == runner) {
				// message polling
				try {
					objreader = new ObjectInputStream(cSocket.getInputStream());
				} catch (Exception e) {
					logger.log(Level.SEVERE, e.getMessage());
				}

				Object o;

				if ((o = objreader.readObject()) != null) {

					if (o instanceof PositionParameter) {
						SendPositionToAll(this, (PositionParameter) o);
						if (CVELogger.isLoggingOn()) {
							this.log("SendPositionToAll()", o);
						}
					} else if (o instanceof LocationParameter) {
						SendLocationToAll(this, (LocationParameter) o);
						if (CVELogger.isLoggingOn()) {
							this.log("SendLocationToAll()", o);
						}
					} else if (o instanceof OrientationParameter) {
						SendOrientationToAll(this, (OrientationParameter) o);
						if (CVELogger.isLoggingOn()) {
							this.log("SendOrientationToAll()", o);
						}
					} else if (o instanceof ExtraParameter) {
						SendExtraParamToAll(this, (ExtraParameter) o);
						if (CVELogger.isLoggingOn()) {
							this.log("SendExtraParamToAll()", o);
						}
					}
				}
			}
		} catch (Exception ioe) {
			logger.log(Level.INFO, clientID + " " + cSocket.getInetAddress().getHostName() + " disconnected.");
			CVEServerThread.removeMe(this);
		}
	}

	public void start() {
		if (runner == null) {
			runner = new Thread(this);
			runner.start();
		}
	}

	public void stop() {
		if (runner != null) {
			runner = null;
		}
	}

	private void log(String method, Object object) {
		String timestamp = timestampFormat.format(new Date());
		logger.log(Level.INFO, timestamp + " [" + clientID + ", " + channel + "] " + method + " " + object);
	}
}
