package cve.server;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Date;
import java.util.logging.*;

import cve.server.util.CVELogger;

public class CVEServer {
	public static final int ServerPort = 7882;

	// please change this value when updated
	// public static final String Version = "2.2 (2010-09-23)";
	// added logging enable/disable capability
	public static final String Version = "2.3 (2012-05-14)";

	private static final Logger logger = Logger.getLogger(CVEServer.class.getPackage().getName());

	private static File f;
	private static FileChannel channel;
	private static FileLock lock;

	public static void main(String args[]) {
		logger.log(Level.INFO, "CVEServer");
		logger.log(Level.INFO, "Ver. " + Version);
		logger.log(Level.INFO, "[Press 'l' and Enter to toggle logging]");

		Thread thread = new Thread(new CVELogger());
		thread.start();

		try {
			f = new File("cveServer.lock");
			// Check if the lock exist
			if (f.exists()) {
				// if exist try to delete it
				f.delete();
			}
			// Try to get the lock
			channel = new RandomAccessFile(f, "rw").getChannel();
			lock = channel.tryLock();
			if (lock == null) {
				// File is lock by other application
				channel.close();
				throw new RuntimeException("Only 1 instance of MyApp can run.");
			}
			// Add shutdown hook to release lock when application shutdown
			ShutdownHook shutdownHook = new ShutdownHook();
			Runtime.getRuntime().addShutdownHook(shutdownHook);

			ServerSocket ss = new ServerSocket(ServerPort);
			while (true) {

				// wait client connection
				logger.log(Level.INFO, "\n****************************\n" + "Waiting for connection..." + "\n" + "****************************");
				Socket client = ss.accept();

				// print log
				String remoteName = client.getInetAddress().getHostName();
				Date date = new Date();

				logger.log(Level.INFO, remoteName + " connected " + "at " + date.toString());

				// generate server thread for a client
				CVEServerThread st = new CVEServerThread(client);
				CVEServerThread.iter = CVEServerThread.Threads.listIterator(CVEServerThread.Threads.size());
				CVEServerThread.iter.add(st);
				st.start();
			}
		} catch (Exception e) {
			logger.log(Level.SEVERE, e.getMessage());
		}
	}

	public static void unlockFile() {
		// release and delete file lock
		try {
			if (lock != null) {
				lock.release();
				channel.close();
				f.delete();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	static class ShutdownHook extends Thread {

		public void run() {
			unlockFile();
		}
	}

}
