/**
 * CVEClient for CVEServer Ver. (aiming to) 0.7.0
 * 
 */

package cve;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

public class CVEClient implements Runnable {
	
	private static final Logger logger = Logger.getLogger(CVEClient.class.getPackage().getName());
	
	static final int ServerPort = 7882;
	private Thread runner;
	private BufferedWriter writer;
	private ObjectInputStream objreader;
	private Socket clientSocket;
	private CVEClientIF clientIF;
	private int clientID;
	private String channel;
	private PositionParameter position;
	private ExtraParameter extra;
	private boolean connected = false;

	/**
	 * Create CVEClient without specifying server
	 */
	public CVEClient(CVEClientIF clientIF, String ch) {

		this("localhost", clientIF, ch);
	}

	/**
	 * Create CVEClient with specific server
	 */
	public CVEClient(String serverHost, CVEClientIF clientIF, String ch) {
		channel = ch;
		this.clientIF = clientIF;
		position = new PositionParameter();
		extra = new ExtraParameter();
		try {
			clientSocket = new Socket(serverHost, ServerPort);
			writer = new BufferedWriter(new OutputStreamWriter(clientSocket.getOutputStream()));

			try {
				Thread.sleep(1000);
			} catch (InterruptedException ie) {
				ie.printStackTrace();
			}

			// send channel name
			writer.write(channel, 0, channel.length());
			writer.newLine();
			writer.flush();

			// start message polling
			start();
			setConnected(true);
			
		} catch (IOException ioException) {
			logger.log(Level.WARNING, "Connection to CVE Server failed: " + ioException.getMessage());
		} catch (Exception exception) {
			logger.log(Level.WARNING, "Error occured while connecting to CVE Server: " + exception.getMessage());
		}
	}

	/**
	 * get position parameter from client application and set to server
	 */
	public synchronized void setPosition(float x, float y, float z, float roll, float pitch, float yaw) {

		PositionParameter position = new PositionParameter(x, y, z, roll, pitch, yaw);

		if (!(position.equals(this.position))) {
			this.position = position;
			try {
				ObjectOutputStream objwriter = new ObjectOutputStream(clientSocket.getOutputStream());
				objwriter.writeObject(position);
				objwriter.flush();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * set location to server
	 */
	public synchronized void setLocation(float x, float y, float z) {
		LocationParameter location = new LocationParameter(x, y, z);
		if (!location.equals(this.position.getLocationParameter())) {
			this.position.setLocation(location);
			try {
				ObjectOutputStream objwriter = new ObjectOutputStream(clientSocket.getOutputStream());
				objwriter.writeObject(location);
				objwriter.flush();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * set orientation to server
	 */
	public synchronized void setOrientation(float roll, float pitch, float yaw) {
		OrientationParameter orientation = new OrientationParameter(roll, pitch, yaw);
		if (!orientation.equals(this.position.getOrientationParameter())) {
			this.position.setOrientation(orientation);
			try {
				ObjectOutputStream objwriter = new ObjectOutputStream(clientSocket.getOutputStream());
				objwriter.writeObject(orientation);
				objwriter.flush();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * send ExtraParameter
	 */
	public synchronized void setExtraParam(String name, float value) {
		ExtraParameter extra = new ExtraParameter(name, value);

		if (!extra.equals(this.extra)) {
			this.extra = extra;
			try {
				ObjectOutputStream objout = new ObjectOutputStream(clientSocket.getOutputStream());
				objout.writeObject(extra);
				objout.flush();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	public void start() {
		if (runner == null) {
			runner = new Thread(this);
			runner.start();
		}
	}

	/**
	 * Data received: PositionParameter, LocationParameter, OrientationParameter
	 */
	public void run() {
		try {
			Thread thisThread = Thread.currentThread();
			while (thisThread == runner) {
				// message polling
				objreader = new ObjectInputStream(clientSocket.getInputStream());
				Object o;
				if ((o = objreader.readObject()) != null) {
					if (o instanceof PositionParameter) {
						PositionParameter pos = (PositionParameter) o;
						if (!pos.equals(position)) {
							position = pos;
							clientIF.getPosition(pos.getX(), pos.getY(), pos.getZ(), pos.getRoll(), pos.getPitch(), pos.getYaw());
						}
					} else if (o instanceof LocationParameter) {
						LocationParameter loc = (LocationParameter) o;
						if (!loc.equals(position.getLocationParameter())) {
							position.setLocation(loc);
							clientIF.getLocation(loc.getX(), loc.getY(), loc.getZ());
						}
					} else if (o instanceof OrientationParameter) {
						OrientationParameter ori = (OrientationParameter) o;
						if (!ori.equals(position.getOrientationParameter())) {
							position.setOrientation(ori);
							clientIF.getOrientation(ori.getRoll(), ori.getPitch(), ori.getYaw());
						}
					} else if (o instanceof ExtraParameter) {
						ExtraParameter ex = (ExtraParameter) o;
						if (!ex.equals(extra)) {
							extra = ex;
							clientIF.getExtraParam(ex.getName(), ex.getValue());
						}
					}
				}
			}
		} catch (IOException ioException) {
			logger.log(Level.WARNING, "Disconnected from CVE Server: " + ioException.getMessage());
		} catch (Exception exception) {
			logger.log(Level.WARNING, "Error occured while running client: " + exception.getMessage());
		}
	}

	public void stop() {
		if (runner != null) {
			runner = null;
		}
	}

	public void setID(int newID) {
		clientID = newID;
		System.out.println("ID was set to " + clientID);
	}

	public boolean isConnected() {
		return connected;
	}

	public void setConnected(boolean status) {
		connected = status;
	}

	public String getChannel() {
		return channel;
	}

	public void setChannel(String channel) {
		this.channel = channel;
	}

	@Override
	public String toString() {
		return "ClientID: " + clientID;
	}
}
